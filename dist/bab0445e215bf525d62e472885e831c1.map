{"version":3,"sources":["serviceWorker.js"],"names":["cacheName","cachedFiles","self","addEventListener","e","console","log","waitUntil","caches","open","then","cache","addAll","keys","keyList","Promise","all","map","key","delete","clients","claim","respondWith","match","request","response","url","fetch","err","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAY,mBAAlB;AACA,IAAMC,cAAc,CACnB,aADmB,EAEnB,WAFmB,EAGnB,YAHmB,CAApB;;AAMA;AACAC,KAAKC,gBAAL,CAAsB,SAAtB,EAAiC,UAASC,CAAT,EAAY;AAC5CC,SAAQC,GAAR,CAAY,aAAZ;;AAEA;AACA;AACAF,GAAEG,SAAF;;AAEC;AACAC,QACEC,IADF,CACOT,SADP,EAEEU,IAFF,CAEO,UAACC,KAAD,EAAW;AAChBN,UAAQC,GAAR,CAAY,sBAAZ;;AAEA;AACA;AACA,SAAOK,MAAMC,MAAN,CAAaX,WAAb,CAAP;AACA,EARF,CAHD;AAaA,CAlBD;;AAqBA;AACAC,KAAKC,gBAAL,CAAsB,UAAtB,EAAkC,UAASC,CAAT,EAAY;AAC7CC,SAAQC,GAAR,CAAY,cAAZ;;AAEA;AACA;AACAF,GAAEG,SAAF;AACC;AACAC,QACEK,IADF,GAEEH,IAFF,CAEO,UAACI,OAAD,EAAa;AAClBT,UAAQC,GAAR,CAAY,YAAZ,EAA0BQ,OAA1B;AACA,SAAOC,QAAQC,GAAR;AACN;AACAF,UAAQG,GAAR,CAAY,UAACC,GAAD,EAAS;AACpB,OAAIA,QAAQlB,SAAZ,EAAuB;AACtBK,YAAQC,GAAR,CAAY,uBAAZ,EAAqCY,GAArC;AACA,WAAOV,OAAOW,MAAP,CAAcD,GAAd,CAAP;AACA;AACD,GALD,CAFM,CAAP;AASA,EAbF,CAFD;;AAkBA;AACA,QAAOhB,KAAKkB,OAAL,CAAaC,KAAb,EAAP;AACA,CAzBD;;AA4BA;AACAnB,KAAKC,gBAAL,CAAsB,OAAtB,EAA+B,UAASC,CAAT,EAAY;AAC1CA,GAAEkB,WAAF;AACC;AACAd,QACEe,KADF,CACQnB,EAAEoB,OADV,EAEEd,IAFF,CAEO,UAACe,QAAD,EAAc;AACnB,MAAIA,QAAJ,EAAc;AACbpB,WAAQC,GAAR,CAAY,oBAAZ,EAAkCmB,SAASC,GAA3C;AACA,UAAOD,QAAP;AACA;AACD;AACA,MAAI;AACHpB,WAAQC,GAAR,CAAY,mBAAZ,EAAiCF,EAAEoB,OAAF,CAAUE,GAA3C;AACA,UAAOC,MAAMvB,EAAEoB,OAAR,CAAP;AACA,GAHD,CAGE,OAAOI,GAAP,EAAY;AACbvB,WAAQwB,KAAR,CAAc,cAAd,EAA8BD,GAA9B;AACA;AACD,EAdF,CAFD;AAkBA,CAnBD","file":"bab0445e215bf525d62e472885e831c1.map","sourcesContent":["const cacheName = 'blakeIsAwesome_00'\nconst cachedFiles = [\n\t'/index.html',\n\t'/index.js',\n\t'/index.css',\n];\n\n// STEP 1: install service worker\nself.addEventListener('install', function(e) {\n\tconsole.log('ğŸ¤– install!')\n\n\t// holdup! wait until installation is complete till moving forward\n\t// if this fails, then service worker is discarded\n\te.waitUntil(\n\n\t\t// this is where you version caches\n\t\tcaches\n\t\t\t.open(cacheName)\n\t\t\t.then((cache) => {\n\t\t\t\tconsole.log('ğŸ¤– caching app shell')\n\n\t\t\t\t// cache.addAll takes an array of urls, fetches them from the server and then caches\n\t\t\t\t// This is an atomic function, so if one url fails, the entire thing ğŸ’©\n\t\t\t\treturn cache.addAll(cachedFiles);\n\t\t\t})\n\t)\n})\n\n\n// STEP 2: activate and validate cached assets\nself.addEventListener('activate', function(e) {\n\tconsole.log('ğŸ¤– activate!');\n\n\t// holdup! wait until all fetch procedures are finished before moving forward\n\t// this allows service workers to update db schemas and delete old caches (done below)\n\te.waitUntil(\n\t\t// get all cache keys and delete old ones\n\t\tcaches\n\t\t\t.keys()\n\t\t\t.then((keyList) => {\n\t\t\t\tconsole.log('ğŸ¤– keyList', keyList)\n\t\t\t\treturn Promise.all(\n\t\t\t\t\t// loop through every cached key\n\t\t\t\t\tkeyList.map((key) => {\n\t\t\t\t\t\tif (key !== cacheName) {\n\t\t\t\t\t\t\tconsole.log('ğŸ¤– removing old cache', key);\n\t\t\t\t\t\t\treturn caches.delete(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t})\n\t)\n\n\t// this can be redundant. it's essentially getting the most recent cache data\n\treturn self.clients.claim();\n});\n\n\n// STEP 3: fetch\nself.addEventListener('fetch', function(e) {\n\te.respondWith(\n\t\t// finds the first requested cached assets and returns\n\t\tcaches\n\t\t\t.match(e.request)\n\t\t\t.then((response) => {\n\t\t\t\tif (response) {\n\t\t\t\t\tconsole.log('ğŸ¤– fetch response:', response.url)\n\t\t\t\t\treturn response;\n\t\t\t\t}\n\t\t\t\t// else try to refech request url\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('ğŸ¤– fetch request:', e.request.url)\n\t\t\t\t\treturn fetch(e.request);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error('ğŸš¨ in fetch:', err)\n\t\t\t\t}\n\t\t\t})\n\t);\n});\n\n"]}